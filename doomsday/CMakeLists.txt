## Copyright (c) 2008-2011 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
## Copyright (c) 2007-2011 Daniel Swanson <danij@dengine.net>
## Copyright (c) 2006-2008 Jamie Jones <jamie_jones_au@yahoo.com.au>
##
## This file is licensed under the GNU GPLv3 or any later versions,
##
## The Doomsday build scripts is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## the deng build scripts is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with the deng build scripts; if not, write to the Free Software
## Foundation, Inc., 51 Franklin St, Fifth Floor, 
## Boston, MA  02110-1301  USA
##
################################################################################

CMAKE_MINIMUM_REQUIRED (VERSION 2.8.3 FATAL_ERROR)

## Supported Build Types are:
##    * None (CMAKE_C_FLAGS) Cmake gcc default of $CFLAGS.
##    * Debug (CMAKE_C_FLAGS_DEBUG) Cmake gcc default of "-g"
##    * Release (CMAKE_C_FLAGS_RELEASE) Cmake gcc default of "-O3 -DNDEBUG"
##    * RelWithDebInfo (CMAKE_C_FLAGS_RELWITHDEBINFO) Cmake default of "-O2 -g"
##    * MinSizeRel (CMAKE_C_FLAGS_MINSIZEREL) Cmake default of "-Os -DNDEBUG"

SET ( CMAKE_BUILD_TYPE Release CACHE STRING "Type of build." )

SET ( CMAKE_C_FLAGS_RELEASE "-O2 -DNDEBUG" CACHE STRING "Flags.")
SET ( CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG" CACHE STRING "Flags.")

PROJECT(doomsday C CXX)

################################################################################
######################## Macros  ###############################################

MACRO(CREATE_MODULE_AT_ONCE_FILE _filename)
    FILE(WRITE ${_filename} "//autogenerated file\n")
    FOREACH (_current_FILE ${ARGN})
    FILE(APPEND ${_filename} "#include \"${_current_FILE}\"\n")
    ENDFOREACH (_current_FILE)
ENDMACRO(CREATE_MODULE_AT_ONCE_FILE _filename)


################################################################################
######################## Configure Build Options  ##############################
SET(BUILD_SHARED_LIBS ON) 

OPTION (BUILDJDOOM "Optionally build the jDoom plugin. Default ON" ON)
OPTION (BUILDJHERETIC "Optionally build the jHeretic plugin. Default ON" ON)
OPTION (BUILDJHEXEN "Optionally build the jHexen plugin. Default ON" ON)
OPTION (BUILDJDOOM64 "Optionally build the jDoom64 plugin. Default ON" ON)
OPTION (BUILDWADMAPCONVERT "Optionally build the WAD Map Converter plugin. Default ON" ON)
OPTION (BUILDOPENAL "Optionally build the OpenAL plugin. Default OFF" OFF)
OPTION (BUILDDEDICATED "Build as a dedicated server. Default OFF" OFF)
OPTION (BUILDDOX "Build doxygen documentation. Default OFF" OFF)
OPTION (ENABLEMAO "Combine all source files in a module and build it at once. Default OFF" OFF)
OPTION (ENABLENETDEBUG "Turn on internal network debugging features. Default OFF" OFF)
OPTION (ENABLERANGECHECKING "Turn on internal range checking features. Default OFF" OFF)
OPTION (ENABLEPROFILE "Turn on internal profiling features. Default OFF" OFF)
OPTION (INSTALLSNOWBERRY "Include Snowberry and associated files in installation." ON)
OPTION (ENABLEWRITERTYPECHECK "Check that Reader/Writer types are correct." OFF)

#MARK_AS_ADVANCED (BUILDJDOOM64)
MARK_AS_ADVANCED (ENABLEMAO)
MARK_AS_ADVANCED (ENABLENETDEBUG)
MARK_AS_ADVANCED (ENABLEPROFILE)
MARK_AS_ADVANCED (ENABLERANGECHECKING)
MARK_AS_ADVANCED (ENABLEWRITERTYPECHECK)

IF (${CMAKE_BINARY_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
    MESSAGE( FATAL_ERROR "In-tree Builds are NOT supported. cd ${CMAKE_SOURCE_DIR}/build and try again")
ENDIF ()

################################################################################
######################## Doomsday Paths  #######################################
## Default Install Prefix on *NIX is /usr/local
## This is set by CMake automagically in CMAKE_INSTALL_PREFIX

## Default *NIX paths
## /usr/local/bin           <- Doomsday binary
## /usr/local/lib           <- libdropengl, libjdoom etc
## /usr/local/share/${PROJECT_NAME} <- jPacks and other data

IF (UNIX)
	IF (NOT WIN32)
		IF (APPLE)
			SET (CMAKE_INSTALL_PREFIX .)
			SET (bindir ${CMAKE_INSTALL_PREFIX}/install)
			SET (libdir ${CMAKE_INSTALL_PREFIX}/install)
			SET (datadir ${CMAKE_INSTALL_PREFIX}/install)
			SET (mandir ${CMAKE_INSTALL_PREFIX}/install)
		ELSE (APPLE)

        ## Do an approximation of the autotools install options. Should make an
        ## easy transition for package maintainers (like me when I'm not hacking here)

        SET (bindir bin CACHE PATH "install location for executables" )

        SET (libdir lib CACHE PATH "install location for libraries" )

        SET (datadir share/${PROJECT_NAME} CACHE PATH "install location for data files" )

        SET (mandir share/man CACHE PATH "install location for man files" )

        ENDIF (APPLE)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

## Thess .pk3s is generated in the Generate.pk3 target.
SET (DENG_ENGINE_DATA ${CMAKE_CURRENT_BINARY_DIR}/doomsday.pk3 )
IF (NOT APPLE)
    SET (DENG_ENGINE_DATA_GRAPHICS ${CMAKE_SOURCE_DIR}/engine/data/graphics/loading1.png ${CMAKE_SOURCE_DIR}/engine/data/graphics/loading2.png )
    SET (DENG_ENGINE_DATA_FONTS ${CMAKE_SOURCE_DIR}/engine/data/fonts/normal12.dfn ${CMAKE_SOURCE_DIR}/engine/data/fonts/normal18.dfn )
ENDIF (NOT APPLE)
SET (DENG_ENGINE_DATA_DIR ${datadir}/data)

SET (DENG_JDOOM_DATA ${CMAKE_CURRENT_BINARY_DIR}/jdoom.pk3 )
SET (DENG_JHERETIC_DATA ${CMAKE_CURRENT_BINARY_DIR}/jheretic.pk3 )
SET (DENG_JHEXEN_DATA ${CMAKE_CURRENT_BINARY_DIR}/jhexen.pk3 )
SET (DENG_JDOOM64_DATA ${CMAKE_CURRENT_BINARY_DIR}/jdoom64.pk3 )

IF (UNIX)
    IF (NOT APPLE)
        ADD_DEFINITIONS ('-DDENG_BASE_DIR="${CMAKE_INSTALL_PREFIX}/${datadir}/" ')
        ADD_DEFINITIONS ('-DDENG_LIBRARY_DIR="${CMAKE_INSTALL_PREFIX}/${libdir}/" ')
    ENDIF (NOT APPLE)
ENDIF (UNIX)

SET (USE_STATIC_PNG "NO")

IF (APPLE)
    ADD_DEFINITIONS ( -DMACOSX )

    IF(NOT MACOS_VERSION)
        SET(MACOS_VERSION "10.4")
    ENDIF()

    MESSAGE( STATUS "Making a 32-bit build only." )

	IF(MACOS_VERSION STREQUAL "10.4" OR MACOS_VERSION STREQUAL "10.5")
		ADD_DEFINITIONS ( -DMACOS_10_4 )
		SET (CMAKE_OSX_DEPLOYMENT_TARGET 10.4)
		SET (CMAKE_OSX_ARCHITECTURES "ppc;i386") # 32-bit
		SET (CMAKE_OSX_SYSROOT "/Developer/SDKs/MacOSX10.4u.sdk")
		SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmacosx-version-min=10.4" )
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.4" )
		# 10.4 doesn't appear to have libpng.dylib as a system library.
		# So we'll use a statically linked one instead.
		SET (USE_STATIC_PNG "YES")
		SET (PNG_LIBRARY_STATIC "/opt/local/lib/libpng.a") # MacPorts (with both archs)
	ELSE()
		ADD_DEFINITIONS ( -DMACOS_10_6 )
		SET (CMAKE_OSX_DEPLOYMENT_TARGET 10.6)
		SET (CMAKE_OSX_ARCHITECTURES "i386")
		SET (CMAKE_OSX_SYSROOT "/Developer/SDKs/MacOSX10.6.sdk")
		SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmacosx-version-min=10.6" )
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.6" )
	ENDIF()

	# Link against QTKit.
	SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework QTKit")

	SET (BUILDSYSTEM MACOSX)

	## Add needed Compiler and Linker flags for OSX
	IF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

		SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flat_namespace" )
		SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Wimplicit-function-declaration -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wimplicit-function-declaration -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} -flat_namespace -undefined suppress" )

		SET (CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL "${CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )
		SET (CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "${CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL} -flat_namespace -undefined suppress" )

	ENDIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

    ADD_DEFINITIONS ('-DDENG_BASE_DIR="./" ')
    ADD_DEFINITIONS ('-DDENG_LIBRARY_DIR="./" ')

    # Look in the correct SDK.
    INCLUDE_DIRECTORIES (${CMAKE_OSX_SYSROOT}/usr/X11/include)
ENDIF (APPLE)

################################################################################
######################## Include Standard Cmake Helpers  #######################
IF (NOT BUILDDEDICATED)
    FIND_PACKAGE(OpenGL REQUIRED)
ENDIF (NOT BUILDDEDICATED)

FIND_PACKAGE(SDL REQUIRED)

IF (NOT BUILDDEDICATED)
    FIND_PACKAGE(SDL_mixer REQUIRED)
ENDIF (NOT BUILDDEDICATED)

FIND_PACKAGE(SDL_net REQUIRED)

FIND_PACKAGE(ZLIB REQUIRED)

FIND_PACKAGE(PNG REQUIRED)

FIND_PACKAGE(CURL REQUIRED)

FIND_PACKAGE(PythonInterp REQUIRED)

IF (UNIX)
    FIND_PACKAGE(Curses REQUIRED)
ENDIF (UNIX)

IF (NOT BUILDDEDICATED)
    IF (UNIX)
        IF (NOT APPLE)
            FIND_PACKAGE(X11 REQUIRED)
        ENDIF (NOT APPLE)
    ENDIF (UNIX)

    IF (BUILDOPENAL)
        FIND_PACKAGE(OpenAL REQUIRED)
    ENDIF (BUILDOPENAL)
ENDIF (NOT BUILDDEDICATED)

IF (UNIX)
    INCLUDE (${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
    INCLUDE (${CMAKE_ROOT}/Modules/CheckLibraryExists.cmake)
ENDIF (UNIX)

FIND_PACKAGE(Doxygen)

INCLUDE(TestBigEndian)

################################################################################
######################## CPack - Generate packages and source tarballs  ########

IF(UNIX AND NOT APPLE)
    INCLUDE(${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake)

    IF(NOT SYSTEMARCH)
        MESSAGE(FATAL_ERROR "The SYSTEMARCH must be set.")
    ENDIF()

    SET(CPACK_GENERATOR "DEB")

    SET(CPACK_DEBIAN_PACKAGE_NAME "doomsday")
    SET(CPACK_PACKAGE_VERSION "${DOOMSDAY_VERSION}-${DOOMSDAY_BUILD}")
    SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION "Doom/Heretic/Hexen port with enhanced graphics
 The Doomsday Engine is a portable version of the classic first person 
 shooters DOOM, Heretic, and Hexen. It lets you enjoy the original games
 using modern technology, including high-resolution OpenGL graphics, 3D 
 models, and dynamic lighting effects. Data files from the original games
 are not included; you must acquire a copy of the original games from 
 id Software and/or Raven Software.")
    SET(CPACK_PACKAGE_CONTACT "Jaakko Ker√§nen <jaakko.keranen@iki.fi>")
    SET(CPACK_DEBIAN_PACKAGE_DEPENDS "python-wxgtk2.8, libsdl1.2debian, libsdl-net1.2, libsdl-mixer1.2, libcurl3")
    SET(CPACK_DEBIAN_PACKAGE_SECTION "universe/games")
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/engine/doc/LICENSE")
    SET(CPACK_SOURCE_PACKAGE_FILE_NAME "doomsday-src_${DOOMSDAY_VERSION}")
    SET(CPACK_PACKAGE_FILE_NAME "${CPACK_DEBIAN_PACKAGE_NAME}_${DOOMSDAY_VERSION}-${DOOMSDAY_BUILD}_${SYSTEMARCH}")

    #IF(NOT DEFINED CPACK_SYSTEM_NAME)
    #    SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
    #ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)

    #IF(${CPACK_SYSTEM_NAME} MATCHES Windows)
    #    IF(CMAKE_CL_64)
    #        SET(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
    #    ELSE(CMAKE_CL_64)
    #        SET(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
    #    ENDIF(CMAKE_CL_64)
    #ENDIF(${CPACK_SYSTEM_NAME} MATCHES Windows)

    #SET(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")

    INCLUDE(CPack)
ENDIF()

################################################################################
######################## Set Common Definitions  ###############################
TEST_BIG_ENDIAN(ENDINESS)
IF (ENDINESS STREQUAL "big endian")
    ADD_DEFINITIONS (-D__BIG_ENDIAN__)
ENDIF (ENDINESS STREQUAL "big endian")

IF (NOT APPLE)
    IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
        ADD_DEFINITIONS (-D__x86_64__)
        MESSAGE( STATUS "Detected a 64-bit compiler, using __x86_64__." )
    ELSE ()
        MESSAGE( STATUS "Detected a 32-bit compiler." )
    ENDIF ()
ENDIF ()

IF (NOT ENABLERANGECHECKING)
    ADD_DEFINITIONS (-DNORANGECHECKING)
ENDIF (NOT ENABLERANGECHECKING)

IF (CMAKE_BUILD_TYPE STREQUAL Debug)
    ADD_DEFINITIONS (-D_DEBUG )
ENDIF (CMAKE_BUILD_TYPE STREQUAL Debug)

IF (ENABLENETDEBUG)
    ADD_DEFINITIONS (-D_NETDEBUG )
ENDIF (ENABLENETDEBUG)

IF (ENABLEPROFILE)
    ADD_DEFINITIONS (-DDD_PROFILE )
ENDIF (ENABLEPROFILE)

IF (APPLE)
	ADD_DEFINITIONS (-DNO_FIXED_ASM )
	SET (BUILDFIXEDASM OFF)
ELSE (APPLE)
	IF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	    IF (CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
	       	ADD_DEFINITIONS (-DGNU_X86_FIXED_ASM )
	       	SET (BUILDFIXEDASM ON)
	    ELSE (CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
	        ADD_DEFINITIONS (-DNO_FIXED_ASM )
	        SET (BUILDFIXEDASM OFF)
	    ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "i.86" OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
	ELSE (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
	    ADD_DEFINITIONS (-DNO_FIXED_ASM )
	    SET (BUILDFIXEDASM OFF)
	ENDIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
ENDIF (APPLE)

## Apple also needs -DUNIX in places
IF (UNIX)
    IF (NOT WIN32)
        ADD_DEFINITIONS ( -DUNIX)
        SET (BUILDSYSTEM UNIX)
    ENDIF (NOT WIN32)
ENDIF (UNIX)

## Are we on Solaris ?
IF(CMAKE_SYSTEM MATCHES "SunOS-*")
    ADD_DEFINITIONS ( -DSOLARIS)
ENDIF(CMAKE_SYSTEM MATCHES "SunOS-*")

################################################################################
######################## Find Our Build Deps  ##################################
## Confirm we have OpenGL
IF (OPENGL_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** libGL not found. On Ubuntu install libgl1-mesa-dev.")
ENDIF (OPENGL_FOUND STREQUAL "NO")

## Confirm we have GLU
IF (OPENGL_GLU_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** libGLU not found. On Ubuntu install libglu1-mesa-dev.")
ENDIF (OPENGL_GLU_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${OPENGL_INCLUDE_DIR})


## Confirm we have SDL
IF (SDL_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** SDL not found. On Ubuntu install libsdl1.2-dev.")
    ENDIF (SDL_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${SDL_INCLUDE_DIR})

## Confirm we have SDL_mixer
IF (SDLMIXER_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** SDL Mixer not found. On Ubuntu install libsdl-mixer1.2-dev.")
    ENDIF (SDLMIXER_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${SDLMIXER_INCLUDE_DIR})

## Confirm we have SDL_net
IF (SDLNET_FOUND STREQUAL "NO")
    MESSAGE (FATAL_ERROR "** SDL Net not found. On Ubuntu install libsdl-net1.2-dev.")
ENDIF (SDLNET_FOUND STREQUAL "NO")
INCLUDE_DIRECTORIES (${SDLNET_INCLUDE_DIR})

## Confirm we have zlib
IF (NOT ZLIB_FOUND)
    MESSAGE (FATAL_ERROR "** zlib not found. On Ubuntu install zlib1g-dev.")
ENDIF (NOT ZLIB_FOUND)
INCLUDE_DIRECTORIES (${ZLIB_INCLUDE_DIR})

## confirm we have libPNG.
IF (NOT PNG_FOUND)
    MESSAGE (FATAL_ERROR "** libpng not found. On Ubuntu install libpng-dev.")
ENDIF (NOT PNG_FOUND)
INCLUDE_DIRECTORIES (${PNG_INCLUDE_DIR})

## confirm we have libcurl.
IF (NOT CURL_FOUND)
    MESSAGE (FATAL_ERROR "** libcurl not found. On Ubuntu install libcurl3-gnutls-dev.")
ENDIF (NOT CURL_FOUND)
INCLUDE_DIRECTORIES (${CURL_INCLUDE_DIR})

## Confirm we have ncurses
IF (UNIX)
    IF (NOT CURSES_LIBRARIES)
        MESSAGE (FATAL_ERROR "** ncurses not found. On Ubuntu install libncurses5-dev.")
    ENDIF (NOT CURSES_LIBRARIES)
    INCLUDE_DIRECTORIES (${CURSES_INCLUDE_DIR})
ENDIF (UNIX)

## Confirm we have X11
IF (UNIX)
    IF (NOT APPLE)
        IF (NOT X11_FOUND)
            MESSAGE (FATAL_ERROR "** X11 not found. On Ubuntu install libx11-dev, libxext-dev.")
        ENDIF (NOT X11_FOUND)
    INCLUDE_DIRECTORIES (${X11_INCLUDE_DIR})
    ENDIF (NOT APPLE)
ENDIF (UNIX)

IF (BUILDOPENAL)
    ## Confirm we have OpenAL
    IF (NOT OPENAL_FOUND STREQUAL "YES")
        MESSAGE (FATAL_ERROR "** Openal not found. On Ubuntu install libopenal-dev.")
    ENDIF (NOT OPENAL_FOUND STREQUAL "YES")
    INCLUDE_DIRECTORIES (${OPENAL_INCLUDE_DIR})
ENDIF (BUILDOPENAL)

IF (UNIX AND NOT APPLE)
    ## Confirm we have dlopen
    CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DL)
    IF(HAVE_DL)
        CHECK_LIBRARY_EXISTS("dl" "dlopen" "" HAVE_LIB_DL)
        IF(NOT HAVE_LIB_DL)
			MESSAGE (FATAL_ERROR "** dlopen not found. On Ubuntu install libc6-dev.")
        ENDIF(NOT HAVE_LIB_DL)
    ELSE(HAVE_DL)
		MESSAGE (FATAL_ERROR "** dlopen not found. On Ubuntu install libc6-dev.")
    ENDIF(HAVE_DL)
ENDIF ()

## confirm we have Python
IF (NOT PYTHONINTERP_FOUND)
    MESSAGE (FATAL_ERROR "** Python not found. On Ubuntu install python.")
ENDIF (NOT  PYTHONINTERP_FOUND)

################################################################################
######################## External LZSS Files ###################################

IF (UNIX)
    INCLUDE_DIRECTORIES ( ${CMAKE_SOURCE_DIR}/external/lzss/portable/include )
    FILE (GLOB LZSS_SOURCES ${CMAKE_SOURCE_DIR}/external/lzss/unix/src/*.c )
ENDIF (UNIX)

################################################################################
######################## The Doomsday Engine  ##################################

ADD_DEFINITIONS ( -D__DOOMSDAY__ )
IF(DEFINED DOOMSDAY_BUILD_TEXT)
    MESSAGE(STATUS "Doomsday Build: ${DOOMSDAY_BUILD_TEXT}")
    ADD_DEFINITIONS ( -DDOOMSDAY_BUILD_TEXT=\"${DOOMSDAY_BUILD_TEXT}\" )
ELSE()
    MESSAGE(STATUS "Doomsday build text not defined.")
ENDIF()

IF(ENABLEWRITERTYPECHECK)
    ADD_DEFINITIONS( -DDENG_WRITER_TYPECHECK )
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/engine/api ${CMAKE_SOURCE_DIR}/engine/portable/include )

FILE(GLOB DENG_PORTABLE_SOURCES
    ${CMAKE_SOURCE_DIR}/engine/portable/src/*.c
    ${CMAKE_SOURCE_DIR}/engine/portable/include/*.h
    ${CMAKE_SOURCE_DIR}/engine/api/*.h )

SET( DENG_PORTABLE_SOURCES ${DENG_PORTABLE_SOURCES} ${CMAKE_SOURCE_DIR}/plugins/common/src/m_fixed.c )

IF(UNIX)
    INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/engine/unix/include )
    FILE (GLOB DENG_ARCH_SPECIFIC_SOURCES ${CMAKE_SOURCE_DIR}/engine/unix/src/*.c ${CMAKE_SOURCE_DIR}/engine/unix/include/*.h )
    SET (DENG_ARCH_SPECIFIC_SOURCES ${DENG_ARCH_SPECIFIC_SOURCES} ${LZSS_SOURCES})
ENDIF()

## .m is Obj-C
IF (APPLE)
	INCLUDE_DIRECTORIES (${CMAKE_SOURCE_DIR}/engine/mac/include )
	FILE (GLOB DENG_OSX_SOURCES 
        ${CMAKE_SOURCE_DIR}/engine/mac/src/*.m 
        ${CMAKE_SOURCE_DIR}/engine/mac/src/*.c
        ${CMAKE_SOURCE_DIR}/engine/mac/include/*.h )
	SET (DENG_ARCH_SPECIFIC_SOURCES ${DENG_ARCH_SPECIFIC_SOURCES} ${DENG_OSX_SOURCES})
ENDIF (APPLE)

IF (COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
ENDIF (COMMAND cmake_policy)

ADD_EXECUTABLE (doomsday ${DENG_PORTABLE_SOURCES} ${DENG_ARCH_SPECIFIC_SOURCES})

IF (USE_STATIC_PNG STREQUAL "YES")
    SET (DENG_PNG_LIB "${PNG_LIBRARY_STATIC}")
ELSE()
    SET (DENG_PNG_LIB "${PNG_LIBRARIES}")
ENDIF()
MESSAGE( STATUS "Using PNG library: ${DENG_PNG_LIB}" )

TARGET_LINK_LIBRARIES (doomsday ${SDL_LIBRARY} ${SDLMIXER_LIBRARY} ${SDLNET_LIBRARY} 
    ${ZLIB_LIBRARIES} ${CURSES_LIBRARIES} ${DENG_PNG_LIB} 
    ${CURL_LIBRARIES} ${OPENGL_LIBRARIES})

IF (UNIX)
    TARGET_LINK_LIBRARIES (doomsday dl m)
    IF (NOT APPLE)
        TARGET_LINK_LIBRARIES (doomsday ${X11_LIBRARIES})
    ENDIF (NOT APPLE)
ENDIF (UNIX)

################################################################################
######################## Dehacked Reader Plugin  ###############################
ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/dehread )
################################################################################
######################## WAD Map Converter Plugin  #############################
IF (BUILDWADMAPCONVERT)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/wadmapconverter )
ENDIF (BUILDWADMAPCONVERT)
################################################################################
######################## OpenAL Output Plugin  #################################
IF (BUILDOPENAL)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/openal )
ENDIF (BUILDOPENAL)
################################################################################
######################## jDoom Game Plugin  ####################################
IF (BUILDJDOOM)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jdoom )
ENDIF (BUILDJDOOM)
################################################################################
######################## jHeretic Game Plugin  #################################
IF (BUILDJHERETIC)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jheretic )
ENDIF (BUILDJHERETIC)
################################################################################
######################## jHexen Game Plugin  ###################################
IF (BUILDJHEXEN)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jhexen )
ENDIF (BUILDJHEXEN)
################################################################################
######################## jDoom64 Game Plugin  #################################
IF (BUILDJDOOM64)
    ADD_SUBDIRECTORY (${CMAKE_SOURCE_DIR}/plugins/jdoom64 )
ENDIF (BUILDJDOOM64)
################################################################################
######################## Doxygenate All Source  ################################
## This target mixes all the documentation together. It's sometimes useful,
## but the 3 seperate functionaliy targets are better in most cases.
## In other words, don't build this, if you build the 3 other Doxygenate targets
IF (BUILDDOX)
    IF (DOXYGEN)
        IF (DOT)
            ADD_CUSTOM_TARGET (Doxygenate.all ALL doxygen
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
        ENDIF (DOT)
    ENDIF (DOXYGEN)
ENDIF (BUILDDOX)
################################################################################
######################## Generate pk3s ##########################################
ADD_CUSTOM_TARGET (Generate.pk3  ALL ${PYTHON_EXECUTABLE} ./packres.py ${CMAKE_CURRENT_BINARY_DIR}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/build/scripts/ )
################################################################################
######################## Show Build Details  ###################################
MESSAGE( STATUS "BUILDSCRIPTSDATE:             " ${BUILDSCRIPTSDATE} )
MESSAGE( STATUS "CMAKE_SYSTEM:                 " ${CMAKE_SYSTEM} )
MESSAGE( STATUS "CMAKE_SYSTEM_PROCESSOR:       " ${CMAKE_SYSTEM_PROCESSOR} )
MESSAGE( STATUS "CMAKE_BUILD_TYPE:             " ${CMAKE_BUILD_TYPE} )
IF (CMAKE_BUILD_TYPE STREQUAL "")
    MESSAGE( STATUS "CMAKE_C_FLAGS:                " ${CMAKE_C_FLAGS} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL "")
IF (CMAKE_BUILD_TYPE STREQUAL Debug)
    MESSAGE( STATUS "CMAKE_C_FLAGS_DEBUG:          " ${CMAKE_C_FLAGS_DEBUG} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL Debug)
IF (CMAKE_BUILD_TYPE STREQUAL Release)
    MESSAGE( STATUS "CMAKE_C_FLAGS_RELEASE:        " ${CMAKE_C_FLAGS_RELEASE} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL Release)
IF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
    MESSAGE( STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO: " ${CMAKE_C_FLAGS_RELWITHDEBINFO} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
IF (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
    MESSAGE( STATUS "CMAKE_C_FLAGS_MINSIZEREL:     " ${CMAKE_C_FLAGS_MINSIZEREL} )
ENDIF (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
MESSAGE( STATUS "CMAKE_C_COMPILER:             " ${CMAKE_C_COMPILER} )
MESSAGE( STATUS "CMAKE_SOURCE_DIR:             " ${CMAKE_SOURCE_DIR} )
MESSAGE( STATUS "CMAKE_BINARY_DIR:             " ${CMAKE_BINARY_DIR} )
IF (APPLE)
    MESSAGE( STATUS "CMAKE_OSX_ARCHITECTURES:      ${CMAKE_OSX_ARCHITECTURES}" )
	MESSAGE( STATUS "CMAKE_OSX_SYSROOT:            ${CMAKE_OSX_SYSROOT}" )
    MESSAGE( STATUS "CMAKE_OSX_DEPLOYMENT_TARGET:  ${CMAKE_OSX_DEPLOYMENT_TARGET}")
ENDIF()
MESSAGE( STATUS "BUILDJDOOM:                   " ${BUILDJDOOM} )
MESSAGE( STATUS "BUILDJHERETIC:                " ${BUILDJHERETIC} )
MESSAGE( STATUS "BUILDJHEXEN:                  " ${BUILDJHEXEN} )
MESSAGE( STATUS "BUILDJDOOM64:                 " ${BUILDJDOOM64} )
MESSAGE( STATUS "BUILDWADMAPCONVERT:           " ${BUILDWADMAPCONVERT} )
MESSAGE( STATUS "BUILDOPENAL:                  " ${BUILDOPENAL} )
MESSAGE( STATUS "BUILDDEDICATED:               " ${BUILDDEDICATED} )
MESSAGE( STATUS "BUILDDOX:                     " ${BUILDDOX} )
MESSAGE( STATUS "BUILDFIXEDASM:                " ${BUILDFIXEDASM} )
MESSAGE( STATUS "BUILDSYSTEM:                  " ${BUILDSYSTEM} )
MESSAGE( STATUS "ENABLEWRITERTYPECHECK:        " ${ENABLEWRITERTYPECHECK} )
MESSAGE( STATUS "CMAKE_INSTALL_PREFIX          " ${CMAKE_INSTALL_PREFIX} )
MESSAGE( STATUS "DENG_BASE_DIR                 " ${datadir} )
MESSAGE( STATUS "DENG_LIBRARY_DIR              " ${libdir} )
MESSAGE( STATUS "DENG_BINARY_DIR               " ${bindir} )
#MESSAGE( STATUS "DENG_ENGINE_DATA_DIR          " ${DENG_ENGINE_DATA_DIR} )
#MESSAGE( STATUS "DENG_JDOOM_DATA_DIR           " ${DENG_JDOOM_DATA_DIR} )
#MESSAGE( STATUS "DENG_JHERETIC_DATA_DIR        " ${DENG_JHERETIC_DATA_DIR} )
#MESSAGE( STATUS "DENG_JHEXEN_DATA_DIR          " ${DENG_JHEXEN_DATA_DIR} )
#MESSAGE( STATUS "DENG_JDOOM64_DATA_DIR         " ${DENG_JDOOM64_DATA_DIR} )

################################################################################
######################## Install Targets  ######################################
SET (DATA_DEST "share/${PROJECT_NAME}/data")

INSTALL(TARGETS doomsday 
    RUNTIME DESTINATION bin 
    LIBRARY DESTINATION lib )
INSTALL(FILES ${DENG_ENGINE_DATA} DESTINATION ${DATA_DEST} )

IF (NOT APPLE)
    INSTALL(FILES ${DENG_ENGINE_DATA_GRAPHICS} DESTINATION ${DENG_ENGINE_DATA_DIR}/graphics/ )
    INSTALL(FILES ${DENG_ENGINE_DATA_FONTS} DESTINATION ${DENG_ENGINE_DATA_DIR}/fonts/ )
ENDIF (NOT APPLE)

IF (APPLE)
    # Bundling.
    SET (BUNDLE_BASE Doomsday)
    SET (BUNDLE ${CMAKE_BINARY_DIR}/${BUNDLE_BASE}.app)
    ADD_CUSTOM_COMMAND( TARGET doomsday POST_BUILD
        COMMAND echo "Updating the ${BUNDLE_BASE}.app bundle."
        COMMAND rm -rf ${BUNDLE}
        COMMAND mkdir -p ${BUNDLE}/Contents/MacOS
        COMMAND cp doomsday ${BUNDLE}/Contents/MacOS/${BUNDLE_BASE}
        COMMAND cp ${CMAKE_SOURCE_DIR}/build/mac/Info.plist ${BUNDLE}/Contents/Info.plist
        COMMAND echo 'APPL????' > ${BUNDLE}/Contents/PkgInfo
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/English.lproj
        COMMAND cp -r ${CMAKE_SOURCE_DIR}/engine/mac/res/English.lproj ${BUNDLE}/Contents/Resources
        COMMAND cp ${CMAKE_SOURCE_DIR}/engine/mac/res/deng.icns ${BUNDLE}/Contents/Resources/
        COMMAND cp -r ${CMAKE_SOURCE_DIR}/engine/mac/res/Startup.nib ${BUNDLE}/Contents/Resources/

        # Copy frameworks.
        COMMAND mkdir -p ${BUNDLE}/Contents/Frameworks
        COMMAND cp -R $ENV{HOME}/Library/Frameworks/{SDL,SDL_mixer,SDL_net}.framework ${BUNDLE}/Contents/Frameworks

        # Copy PK3s.
        COMMAND cp doomsday.pk3 ${BUNDLE}/Contents/Resources/
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/Data/
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/Data/Graphics/
        COMMAND mkdir -p ${BUNDLE}/Contents/Resources/Data/Fonts/
        COMMAND cp ${CMAKE_SOURCE_DIR}/engine/data/graphics/loading{1,2}.png ${BUNDLE}/Contents/Resources/Data/Graphics/
        COMMAND cp ${CMAKE_SOURCE_DIR}/engine/data/fonts/normal{12,18}.dfn ${BUNDLE}/Contents/Resources/Data/Fonts/
        )
ENDIF (APPLE)

IF (UNIX AND NOT APPLE)
    # Apt repository for automatic updates.
    INSTALL(FILES "${CMAKE_SOURCE_DIR}/../distrib/linux/doomsday-builds.list"
        DESTINATION /etc/apt/sources.list.d)
    
    # Desktop entry.
    INSTALL(FILES "${CMAKE_SOURCE_DIR}/../distrib/linux/doomsday-engine.desktop"
        DESTINATION /usr/share/applications)

    IF (INSTALLSNOWBERRY)
        # Bundle Snowberry.
        SET (SB_ROOT "${CMAKE_SOURCE_DIR}/../snowberry")
        SET (SB_DEST share/${PROJECT_NAME}/snowberry)
        INSTALL(FILES
            ${SB_ROOT}/cfparser.py
            ${SB_ROOT}/events.py
            ${SB_ROOT}/host.py
            ${SB_ROOT}/language.py
            ${SB_ROOT}/logger.py
            ${SB_ROOT}/paths.py
            ${SB_ROOT}/plugins.py
            ${SB_ROOT}/snowberry.py
            ${SB_ROOT}/ui.py
            ${SB_ROOT}/widgets.py
            DESTINATION ${SB_DEST})

        INSTALL(DIRECTORY ${SB_ROOT}/conf ${SB_ROOT}/graphics ${SB_ROOT}/lang ${SB_ROOT}/plugins
            ${SB_ROOT}/profiles ${SB_ROOT}/sb
            DESTINATION ${SB_DEST}
            PATTERN "osx-*.conf" EXCLUDE
            PATTERN "win-*.conf" EXCLUDE
            PATTERN "doomsday.conf" EXCLUDE
            PATTERN "appearance.conf" EXCLUDE
            PATTERN "components.conf" EXCLUDE
            PATTERN "*example*" EXCLUDE
            PATTERN ".*ignore" EXCLUDE)

        INSTALL(FILES ${CMAKE_BINARY_DIR}/launch-doomsday
            DESTINATION bin
            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
    ENDIF()
ENDIF()

IF (BUILDJDOOM)
    INSTALL(FILES ${DENG_JDOOM_DATA} DESTINATION ${DATA_DEST}/jdoom )
ENDIF (BUILDJDOOM)

IF (BUILDJHERETIC)
    INSTALL(FILES ${DENG_JHERETIC_DATA} DESTINATION ${DATA_DEST}/jheretic )
ENDIF (BUILDJHERETIC)

IF (BUILDJHEXEN)
    INSTALL(FILES ${DENG_JHEXEN_DATA} DESTINATION ${DATA_DEST}/jhexen )
ENDIF (BUILDJHEXEN)

# jDoom64 not distributed at the moment.
#IF (BUILDJDOOM64)
#    INSTALL(FILES ${DENG_JDOOM64_DATA} DESTINATION ${DATA_DEST}/jdoom64 )
#ENDIF (BUILDJDOOM64)

