/*
 * The Doomsday Engine Project -- libdeng2
 *
 * Copyright (c) 2004-2009 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef LIBDENG2_FUNCTION_H
#define LIBDENG2_FUNCTION_H

#include "../Counted"
#include "../String"
#include "../Compound"

#include <list>
#include <map>

namespace de
{
    class Statement;
    class Context;
    class Expression;
    class Value;
    class ArrayValue;

    /**
     * Set of statements ready for execution. The argument list defines what kind of
     * arguments can be passed to the function and what are the default values for
     * the arguments. Functions are reference-counted so that they exist as long as
     * other objects use them (FunctionStatement, FunctionValue).
     *
     * @ingroup script
     */
    class Function : public Counted
    {
    public:
        /// An incorrect number of arguments is given in a function call. @ingroup errors
        DEFINE_ERROR(WrongArgumentsError);

        typedef std::list<std::string> Arguments;
        typedef std::map<std::string, Value*> Defaults;
        typedef std::list<const Value*> ArgumentValues;
        
    public:
        Function();
        
        /**
         * Constructor.
         *
         * @param args      Names of the function arguments.
         * @param defaults  Default values for some or all of the arguments.
         */
        Function(const Arguments& args, const Defaults& defaults);
        
        ~Function();

        /// Returns a human-readable representation of the function.
        String asText() const;
        
        Compound& compound() { return compound_; }

        const Compound& compound() const { return compound_; }

        Arguments& arguments() { return arguments_; }
        
        const Arguments& arguments() const { return arguments_; }

        Defaults& defaults() { return defaults_; }
        
        const Defaults& defaults() const { return defaults_; }
      
        void mapArgumentValues(const ArrayValue& args, ArgumentValues& values);
        
        /**
         * Perform a native call of the function. 
         *
         * @param context  Execution context. Any results generated by a
         *                 native function are placed here.
         * @param args     Arguments to the function. The array's first element
         *                 is always a dictionary that contains the labeled values.
         *
         * @return @c false, if the context should proceed with the non-native
         *         function call by creating a new execution context and running
         *         the statements of the function there. @c true, if the 
         *         native call handles everything, including placing the 
         *         return value into the evaluator.
         */
        virtual bool callNative(Context& context, const ArgumentValues& args);
        
    private:
        /// Argument names.
        Arguments arguments_;

        /// The function owns the default values stored in the arguments list.
        Defaults defaults_;
        
        /// The statements of this function.
        Compound compound_;
    };
}

#endif /* LIBDENG2_FUNCTION_H */
