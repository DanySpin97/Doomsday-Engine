/*
 * The Doomsday Engine Project
 *
 * Copyright (c) 2011-2013 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef LIBDENG2_DELEGATERULE_H
#define LIBDENG2_DELEGATERULE_H

#include "../ConstantRule"

namespace de {

/**
 * The value of a delegate rule is generated by a separate source rule. The
 * source rule is expected to set the delegate rule's value when the source
 * gets updated.
 *
 * Delegate rules use delegated reference counting, i.e., they cannot be used
 * on their own but instead only as part of another rule. (Delegated reference
 * counting means that references held to the derived rule actually are held to
 * the delegate target.)
 */
class DelegateRule : public ConstantRule
{
    Q_OBJECT

public:
    /**
     * Constructs a new delegate rule.
     *
     * @param source  Source rule.
     */
    explicit DelegateRule(Rule const &source);

    /**
     * Public destructor. The source rule/owner is expected to directly call
     * this instead of trying to release the rule (which would be impossible
     * due to delegation).
     */
    ~DelegateRule();

protected:
    void update();

private:
    Rule const &_source;
};

} // namespace de

#endif // LIBDENG2_DELEGATERULE_H
