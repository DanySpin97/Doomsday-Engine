# The Doomsday Engine Project -- Doomsday Client
#
# Copyright (c) 2013 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

#----------------------------------------------------------------------------
# CONFIGURATION FOR THE DOOMSDAY CLIENT
#
# This module contains configuration related scripts for the client 
# application. It is automatically imported by Config and used as needed.
#
# TODO: make sure the server doesn't run this

import Version

def setDefaults(d)
    # Applies the client's defaults.
    # - d: Record where to set the values.
    
    # Input defaults.
    record d.input
    record d.input.mouse
    d.input.mouse.syncSensitivity = True
    
    try
        import DisplayMode
        
        # The default audio and video subsystems.
        d.video = 'opengl'
        d.audio = 'fmod'
    
        # Window manager defaults.
        record d.window
        d.window.fsaa = True    # Remove this (should be window-specific).
    
        # Configure the main window.
        record d.window.main
        d.window.main.showFps = False
        d.window.main.center  = True
        d.window.main.fsaa    = True
        d.window.main.vsync   = True

        # The default window parameters depend on the original display mode.
        mode = DisplayMode.originalMode()

        # By default the fullscreen resolution is the desktop resolution.
        d.window.main.fullSize = [mode['width'], mode['height']]
    
        # In windowed mode mode, leave some space on the sides so that
        # the first switch to windowed mode does not place the window in an
        # inconvenient location. The reduction is done proportionally.
        offx = mode['width'] * 0.15
        offy = mode['height'] * 0.15
        d.window.main.rect = [offx, offy, 
                              mode['width'] - 2*offx,
                              mode['height'] - 2*offy]
        d.window.main.colorDepth = mode['depth']

        if Version.OS == 'windows' or Version.OS == 'macx'
            d.window.main.fullscreen = True
            d.window.main.maximize   = False
        else
            d.window.main.fullscreen = False
            d.window.main.maximize   = True
        end
    
    catch NotFoundError
        # DisplayMode isn't available on the server.
    end

    # Defaults for the automatic updater.
    record d.updater
    
    const d.updater.DAILY      = 0
    const d.updater.BIWEEKLY   = 1
    const d.updater.WEEKLY     = 2
    const d.updater.MONTHLY    = 3
    const d.updater.AT_STARTUP = 4
    
    const d.updater.CHANNEL_STABLE   = 0
    const d.updater.CHANNEL_UNSTABLE = 1

    d.updater.frequency = d.updater.WEEKLY
    if Version.STABLE
        d.updater.channel = d.updater.CHANNEL_STABLE
    else
        d.updater.channel = d.updater.CHANNEL_UNSTABLE
    end
    d.updater.lastChecked = Time("")
    d.updater.onlyManually = (Version.OS == 'unix')    
    d.updater.delete = True
    d.updater.downloadPath = "${DEFAULT}"
    d.updater.deleteAtStartup = ""
    
    # Console defaults.
    record d.console
    d.console.snap = True
    
