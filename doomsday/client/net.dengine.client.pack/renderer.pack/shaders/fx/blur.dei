group fx {
    # Blurring is done in two passes: horizontal and vertical. This is more
    # efficient than doing the equivalent amount of blurring in a single pass.
    group blur {
        # Both passes use the same vertex shader.
        common = "
            #version 330
            uniform highp mat4 uMvpMatrix;
            uniform highp vec4 uColor;
            uniform highp vec4 uWindow;

            in highp vec4 aVertex;
            in highp vec2 aUV;
            in highp vec4 aColor;

            out highp vec2 vUV;
            out highp vec4 vColor;

            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = uWindow.xy + aUV * uWindow.zw;
                vColor = aColor * uColor;
            }"
    
        shader horizontal {
            vertex $= fx.blur.common
            fragment = "
                #version 330
                uniform sampler2D uTex;
                uniform highp vec2 uBlurStep;

                in highp vec2 vUV;
                in highp vec4 vColor;
                
                out highp vec4 FragColor;

                void main(void) {
                    highp vec4 sum = vec4(0.0);
                    sum += texture(uTex, vec2(vUV.s - 4.0 * uBlurStep.s, vUV.t)) * 0.05;
                    sum += texture(uTex, vec2(vUV.s - 3.0 * uBlurStep.s, vUV.t)) * 0.09;
                    sum += texture(uTex, vec2(vUV.s - 2.0 * uBlurStep.s, vUV.t)) * 0.123;
                    sum += texture(uTex, vec2(vUV.s - uBlurStep.s,       vUV.t)) * 0.154;
                    sum += texture(uTex, vUV)                                    * 0.165;
                    sum += texture(uTex, vec2(vUV.s + uBlurStep.s,       vUV.t)) * 0.154;
                    sum += texture(uTex, vec2(vUV.s + 2.0 * uBlurStep.s, vUV.t)) * 0.123;
                    sum += texture(uTex, vec2(vUV.s + 3.0 * uBlurStep.s, vUV.t)) * 0.09;
                    sum += texture(uTex, vec2(vUV.s + 4.0 * uBlurStep.s, vUV.t)) * 0.05;
                    FragColor = sum;
                    FragColor.a = 1.0;
                }"
        }
        
        shader vertical {
            vertex $= fx.blur.common
            fragment = "
                #version 330
                uniform sampler2D uTex;
                uniform highp vec2 uBlurStep;

                in highp vec2 vUV;
                in highp vec4 vColor;
                
                out highp vec4 FragColor;

                void main(void) {
                    highp vec4 sum = vec4(0.0);
                    sum += texture(uTex, vec2(vUV.s, vUV.t - 4.0 * uBlurStep.t)) * 0.05;
                    sum += texture(uTex, vec2(vUV.s, vUV.t - 3.0 * uBlurStep.t)) * 0.09;
                    sum += texture(uTex, vec2(vUV.s, vUV.t - 2.0 * uBlurStep.t)) * 0.123;
                    sum += texture(uTex, vec2(vUV.s, vUV.t - uBlurStep.t      )) * 0.154;
                    sum += texture(uTex, vUV)                                    * 0.165;
                    sum += texture(uTex, vec2(vUV.s, vUV.t + uBlurStep.t      )) * 0.154;
                    sum += texture(uTex, vec2(vUV.s, vUV.t + 2.0 * uBlurStep.t)) * 0.123;
                    sum += texture(uTex, vec2(vUV.s, vUV.t + 3.0 * uBlurStep.t)) * 0.09;
                    sum += texture(uTex, vec2(vUV.s, vUV.t + 4.0 * uBlurStep.t)) * 0.05;
                    FragColor = sum * vColor;
                }"
        }
    }
}
