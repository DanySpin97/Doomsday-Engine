group generic {
    # Simple shader with untextured vertices. There is an additional constant
    # color applied to all vertices. Uses a combined model-view-projection
    # matrix.
    shader color_ucolor {
        vertex = "
            #version 330
            uniform highp mat4 uMvpMatrix;
            uniform highp vec4 uColor;
            in highp vec4 aVertex;
            in highp vec4 aColor;
            out highp vec4 vColor;
            
            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vColor = uColor * aColor;
            }"
        fragment = "
            #version 330
            in highp vec4 vColor;
            out highp vec4 FragColor;
            
            void main(void) {
                FragColor = vColor;
            }"
    }
    
    shader texture {
        vertex = "
            #version 330
            uniform highp mat4 uMvpMatrix;
            in highp vec4 aVertex;
            in highp vec2 aUV;
            out highp vec2 vUV;
        
            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = aUV;
            }"
        fragment = "
            #version 330
            uniform sampler2D uTex;
            in highp vec2 vUV;
            out highp vec4 FragColor;

            void main(void) {
                FragColor = texture(uTex, vUV);
            }"        
    }
    
    group textured {    
        # Simple shader with one texture plus a color per vertex. Uses a
        # combined model-view-projection matrix.
        shader color {
            vertex = "
                #version 330
                uniform highp mat4 uMvpMatrix;
                in highp vec4 aVertex;
                in highp vec2 aUV;
                in highp vec4 aColor;
                out highp vec2 vUV;
                out highp vec4 vColor;
            
                void main(void) {
                    gl_Position = uMvpMatrix * aVertex;
                    vUV = aUV;
                    vColor = aColor;
                }"
            fragment = "
                #version 330
                uniform sampler2D uTex;
                in highp vec2 vUV;
                in highp vec4 vColor;
                out highp vec4 FragColor;

                void main(void) {
                    FragColor = vColor * texture(uTex, vUV);
                }"
        }
    
        # Simple shader with one texture plus a color per vertex. There is
        # an additional constant color applied to all vertices. Uses a
        # combined model-view-projection matrix.
        shader color_ucolor {
            vertex = "
                #version 330
                uniform highp mat4 uMvpMatrix;
                uniform highp vec4 uColor;
                in highp vec4 aVertex;
                in highp vec2 aUV;
                in highp vec4 aColor;
                out highp vec2 vUV;
                out highp vec4 vColor;
            
                void main(void) {
                    gl_Position = uMvpMatrix * aVertex;
                    vUV = aUV;
                    vColor = aColor * uColor;
                }"
            fragment = "
                #version 330
                uniform sampler2D uTex;
                in highp vec2 vUV;
                in highp vec4 vColor;
                out highp vec4 FragColor;

                void main(void) {
                    FragColor = vColor * texture(uTex, vUV);
                }"
        }
    }
}
