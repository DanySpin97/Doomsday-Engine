group model {
    # Shader for skeletal animation and generic per-pixel lighting:
    # diffuse color, normal map, emission map, specular intensity.
    shader skeletal.normal_specular_emission {
        # Mapping when used with ModelDrawable.
        textureMapping <diffuse, normals, specular, emission>
        vertex = "
            #version 330
            
            uniform highp mat4 uMvpMatrix;
            uniform highp mat4 uBoneMatrices[64];
            uniform highp vec3 uLightDirs[4];
            uniform highp vec3 uEyeDir;

            in highp vec4 aVertex;
            in highp vec3 aNormal;
            in highp vec3 aTangent;
            in highp vec3 aBitangent;
            in highp vec2 aUV;
            in highp vec4 aBounds;   // diffuse map
            in highp vec4 aBounds2;  // normal map
            in highp vec4 aBounds3;  // specular map
            in highp vec4 aBounds4;  // emission map
            in highp vec4 aBoneIDs;
            in highp vec4 aBoneWeights;

            out highp vec2 vUV;
            out highp vec2 vNormalUV;
            out highp vec2 vSpecularUV;
            out highp vec2 vEmissionUV;
            out highp vec3 vLightDirs[4]; // tangent space
            out highp vec3 vEyeDir;       // tangent space

            highp vec3 transformVector(highp vec3 dir, highp mat4 matrix) 
            {
                return (matrix * vec4(dir, 0.0)).xyz;
            }

            void main(void) 
            {
                // Bone transformation.
                highp mat4 bone =
                    uBoneMatrices[int(aBoneIDs.x + 0.5)] * aBoneWeights.x +
                    uBoneMatrices[int(aBoneIDs.y + 0.5)] * aBoneWeights.y +
                    uBoneMatrices[int(aBoneIDs.z + 0.5)] * aBoneWeights.z +
                    uBoneMatrices[int(aBoneIDs.w + 0.5)] * aBoneWeights.w;
                    
                // Vertex position.
                highp vec4 modelPos = bone * aVertex;
                gl_Position = uMvpMatrix * modelPos;
                
                // Tangent space.
                highp vec3 normal       = transformVector(aNormal, bone);
                highp vec3 tangent      = transformVector(aTangent, bone);
                highp vec3 bitangent    = transformVector(aBitangent, bone);
                highp mat3 tangentSpace = mat3(tangent, bitangent, normal);
                
                // Light direction in tangent space.
                vLightDirs[0] = uLightDirs[0] * tangentSpace;
                vLightDirs[1] = uLightDirs[1] * tangentSpace;
                vLightDirs[2] = uLightDirs[2] * tangentSpace;
                vLightDirs[3] = uLightDirs[3] * tangentSpace;
                
                // Eye direction in tangent space.
                vEyeDir = uEyeDir * tangentSpace;
                
                vUV         = aBounds.xy  + aUV * aBounds.zw;
                vNormalUV   = aBounds2.xy + aUV * aBounds2.zw;
                vSpecularUV = aBounds3.xy + aUV * aBounds3.zw;
                vEmissionUV = aBounds4.xy + aUV * aBounds4.zw;
            }"
        fragment = "
            #version 330
        
            uniform sampler2D uTex;
            uniform highp vec4 uAmbientLight;
            uniform highp vec4 uLightIntensities[4];
            
            in highp vec2 vUV;
            in highp vec2 vNormalUV;
            in highp vec2 vSpecularUV;
            in highp vec2 vEmissionUV;
            in highp vec3 vLightDirs[4]; // tangent space
            in highp vec3 vEyeDir;       // tangent space
            
            out highp vec4 FragColor;
            
            highp vec3 normalVector() 
            {
                return (texture(uTex, vNormalUV).xyz * 2.0) - 1.0;
            }

            highp vec4 diffuseLight(int index, highp vec3 normal) 
            {
                if(uLightIntensities[index].a <= 0.001) 
                {
                    return vec4(0.0); // too dim
                }
                highp float d = dot(normal, normalize(vLightDirs[index]));
                return max(d * uLightIntensities[index], vec4(0.0));
            }
            
            highp vec4 specularLight(int index, highp vec3 normal) 
            {
                if(uLightIntensities[index].a <= 0.001) 
                {
                    return vec4(0.0); // too dim
                }
                highp vec3 reflected = reflect(-vLightDirs[index], normal);
                
                // Check the specular texture for parameters.
                highp vec4 specular = texture(uTex, vSpecularUV);
                highp float shininess = max(1.0, specular.a * 7.0);
                
                highp float d = dot(vEyeDir, reflected) * 
                    shininess - max(0.0, shininess - 1.0);                
                return max(d * uLightIntensities[index], vec4(0.0)) * 
                    vec4(specular.rgb * 2.0, 1.0);
            }
            
            void main(void) 
            {        
                highp vec3 normal = normalVector();
                highp vec4 diffuse = texture(uTex, vUV);
                        
                FragColor = diffuse *
                    (uAmbientLight + 
                     diffuseLight(0, normal) + 
                     diffuseLight(1, normal) + 
                     diffuseLight(2, normal) + 
                     diffuseLight(3, normal));

                highp vec4 specular =
                    specularLight(0, normal) +
                    specularLight(1, normal) +
                    specularLight(2, normal) +
                    specularLight(3, normal);
                    
                highp vec4 emission = texture(uTex, vEmissionUV);
                    
                FragColor.rgb += specular.rgb + (emission.rgb * emission.a);
                FragColor.a = diffuse.a + specular.a + emission.a;                
            }"
    }
}
