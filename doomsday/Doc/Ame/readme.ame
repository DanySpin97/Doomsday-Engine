@include{jake.ah}
@macro{TITLE}{ The Doomsday Engine }
@macro{VERSION}{ Version 1.7.7 }

@require{amestd}
@include{darktable}

@begin

CONTENTS: @contents{1}

@chapter{ Introduction }

The Doomsday Engine is an enhanced and extended Win32 version of the DOOM
engine. It was originally based on the Hexen source code but parts of it
have later been completely rewritten. Doomsday is only an engine: you will
also need a Game DLL. Three such DLLs are being developed alongside the
engine: jDoom, jHeretic and jHexen.

Doomsday is a direct descendant of JHexen. The first version of JHexen was
released in October 1999. Subsequently the first version of Doomsday was
released in February 2000.

The engine, jDoom, jHeretic and jHexen are being developed by Jaakko
Keränen. Of late an increasing number of people has been involved in the
project (see @ref{acks}{Acknowledgements}).

@section{ Features }

Graphics:
@list/thin{
@item Supports both OpenGL and Direct3D
@item Dynamic lights
@item Lens flares
@item High-resolution textures (PNG, TGA, PCX)
@item Particle effects
@item Detail textures
@item 3D models (uses Quake II's MD2 format)
@item Simple environmental mapping for 3D models (shiny effects)
@item Actor (monster) movement smoothing
@item Simple shadows for objects
@item Fog
}

Sound:
@list/thin{
@item Plays music using standard Windows MIDI routines
@item Supports DirectSound, DirectSound3D, EAX 2.0 and A3D 3.0
@item Uses FMOD (@link{http://www.fmod.org/}) to play music files such as MP3
@item 3D sound effects
@item Environmental (reverb) effects
@item Runtime sound effect resamping to 22/44 KHz with 8/16 bits
}

Networking:
@list/thin{
@item Client/server networking
@item Uses DirectPlay: TCP/IP, IPX, modem and serial link support
@item Up to 16 players
@item Clients can join games in progress
@item Dedicated mode for servers
}

Other:
@list/thin{
@item Console
@item Control Panel
@item Plain text definition files for game objects and other data
@item Files can be loaded from WAD files (see @file{wadtool})
@item Doomsday KickStart: a launcher for games running on Doomsday
}


@section{ Requirements }

@list{
@item Pentium 166 (or equivalent) with 64Mb of RAM (3D models &
	special effects disabled)
@item Windows 95 (or newer)
@item DirectX 8 (or newer)
@item A display adapter capable of 3D hardware acceleration
@item At least one WAD file from the original Doom, Heretic, Hexen, etc.
}



$ An overview of the Doomsday docs.
@chapter{ Documentation }

Additional documentation is available in the @file{ Doc\ } folder:

@deflist{
@item{ @file{Beginner.txt} }
	A Beginner's Guide to Doomsday. Installation instructions and
	basic usage information for a first-time user.

@item{ @file{CmdLine.txt} }
	Doomsday command line options. A quick reference listing all
	the command line options recognized by Doomsday, with a short
	explanation for each.

@item{ @file{DEDDoc.txt} }
	Doomsday Engine Definition reference. An in-depth look into the
	syntax and uses of DED files.

@item{ @file{InFine.txt} }
	InFine scripts reference. InFine scripts are used to define
	interludes and finale animations.

@item{ @file{DHistory.txt} }
	Doomsday version history.

@item{ @file{DSS.txt} }
	Doomsday directory structure standard. Mod-makers and other
	developers are encouraged to follow the structure described here.

@item{ @file{Network.txt} }
	Multiplayer games with Doomsday. Some details about network
	games running on Doomsday.

@item{ @file{Example.bat} }
	Example batch file for launching.
}

An up-to-date version history of the Doomsday engine should
be available at:

@ind{@link{http://www.doomsdayhq.com/doc_history.php}}

The Extended General Line And Sector Type Reference (XGRef) can be
downloaded from:

@ind{@link{http://www.students.tut.fi/~jotkeran/files/XGRef.pdf}}




$ Various technical details.
@chapter{ Details }

@section{ Paths and the command line }

There are a few things you should know about the handling of relative
paths. First of all, these are the directories that the engine is working
with:

@list{
@item Doomsday root/base directory (for example @file{ C:\Doomsday\ }).
	Everything relating to the Doomsday engine is under this directory.

@item Working/runtime directory (for example @file{ C:\Doomsday\Run\x\ }).
	This is the directory where the engine spends it time when a game
	is running.
}

The @opt{-basedir} option tells the engine where the base directory is in
relation to the runtime directory (or it's the the absolute path of the
base directory, e.g. @file{ C:\Doomsday\ }).

The principle is that @opt{-basedir} only affects built-in default paths and
relative paths in DED files. @opt{-basedir} does not affect relative paths in
command line options. If a relative path is given on the command line, it
is interpreted in relation to the runtime directory. For example, the
option @opt{-file doom.wad} will make the engine read the file
@file{doom.wad}, which is located in the runtime directory. In the default
configuration this is @file{ C:\Doomsday\Run\jDoom\ }. KickStart automatically
uses a @opt{-basedir} of @file{..\..}, which means the root directory is the
'grandparent' of the runtime directory. The option @opt{-sbd} (@opt{-stdbasedir})
is the equivalent of @opt{-basedir ..\..}.

There is one exception, however: with the @opt{-file} (and @opt{-iwad}) options a
relative path can begin with a greater-than character (>). When the engine
loads the WAD file in question the > character is replaced with the path
specified by @opt{-basedir}. For example, @opt{-file >Data\Doom.wad} would make the
engine load a WAD named @file{ C:\Doomsday\Data\Doom.wad } (assuming the default
Doomsday root @file{ C:\Doomsday\ }). Note that if you're executing
@file{Doomsday.exe} from the command line or from a DOS batch file, you must
enclose the file names that contain a > character in quotes or otherwise DOS
will think you're trying to redirect output. In response files it doesn't matter if
there are quotes or not. (If you really are trying to redirect output, you
should use the @opt{-out} option.)

The default launch method (used by KickStart) is a runtime directory
oriented approach. KickStart will change the current working directory to
the Game's runtime folder and execute @file{Doomsday.exe} from there, with the
@opt{-basedir ..\..} option. This way the engine will use the appropriate runtime
folder as the working directory, but will also know where the Doomsday root
directory is by prepending the base directory's @file{..\..} to default path
names (like fonts and definitions files).

There is an alternative approach, which could be called an executable
oriented approach. @file{Doomsday.exe} is executed in the @file{Bin} directory,
with the options @opt{-userdir <runtime-path> -basedir <path-to-root>}.
@file{<runtime-path>} can be a relative or an absolute path to the correct
runtime directory. Again, @opt{-basedir} tells the engine where the root
directory is, as an absolute path or in relation to @file{<runtime-path>}.
@opt{-userdir} will make the engine run in the given directory, i.e.
it specifies the runtime directory.

Note that @opt{-game} and @opt{-gl} work a bit differently because their
arguments are directly passed on to the Win32 routine @cmd{LoadLibrary}. You
should either omit the path entirely (e.g. @opt{-game jHeretic.dll}) or use
a full path to the DLL (e.g. @opt{-game C:\Doomsday\Bin\jHeretic.dll}), no
matter where you're executing @file{Doomsday.exe}.

The default place where you should put your IWADs is @file{ Data\<Game>\ }.
jDoom, jHeretic and jHexen will by default look for IWADs in @file{ Data\<Game>\ },
@file{ Data\ }, the base directory and the runtime directory, in that order.



@section{ The @opt{-file} option }

@a{fileopt}
The @opt{-file} option is used to load WAD files and other data files
from the command line. @opt{-file} has two aliases: the abbreviation
@opt{-f} and @opt{-iwad}. Both of these are just aliases; they are
treated like they were in fact @opt{-file}.

In addition to normal WAD files, the @opt{-file} option can be used
to load any type of data files, for instance PCX images. An example:

@samp{@opt{-file image.pcx}}

This would load the file @file{image.pcx} from the runtime directory.
When loading files in this manner, the engine will treat the file
as if it was a WAD file with a single data lump. The lump gets its name
from the base of the file name, which in the example's case would be
@file{IMAGE}. Anyone can then refer to the data lump using that name,
just as if it was included in a WAD file.

Any file loaded with the @opt{-file} option can't be unloaded from
memory at runtime using the @cmd{unload} command. This is mainly a
precaution, since unloading the main WAD file of the game or any
data related to it would lead to fatal errors.



@section{ Definitions and files in WADs }

After all DED files have been processed, the engine will check through all
the loaded WAD files for lumps named @file{DD_DEFNS}. All the lumps with that name
are processed just as if they were DED files, i.e. they should contain a
DED file in plain text format. The @file{DD_DEFNS} lumps are applied in the order
in which they have been loaded.

Another special lump used by Doomsday is @file{DD_DIREC}. It contains a table that
translates file paths to lump names. An example is shown below:

@samp{
@pre{FILE001  /Md2/jDoom/Some.md2
FILE002  Another.ded}
}

Each line in @file{DD_DIREC} contains a lump/path pair. The paths that begin with
a (back)slash are interpreted to start from the Doomsday base directory
(set with @opt{-basedir}; e.g. @file{C:\Doomsday}) and paths that don't begin with a
(back)slash are located in the runtime directory. The engine will search
the @file{DD_DIREC}@nsp{s} first before opening any file
(but only when reading). Note however that all kinds of files are not loaded
using the @file{DD_DIREC}@nsp{s}: for instance demos (which are compressed
with the LZSS library) must always be loaded from real files.

I've written a simple utility for automatically creating a WAD file that
contains the current directory and all its subdirectories plus a @file{DD_DIREC}
lump that has (with a high probability) a unique lump name for each file.
You could invoke the utility like this:

@samp{@cmd{ wadtool myfiles.wad /Data/jDoom/Textures/ }}

This would create a WAD file that contains all the files from the current
directory. When writing the @file{DD_DIREC} table, the prefix
"/Data/jDoom/Textures/" would be added to each file name.



@section{ High-resolution textures }

Normal wall textures and flats can be replaced with TGA (Truevision Targa),
PNG (Portable Network Graphics) or PCX (Zsoft Paintbrush) images. The
engine currently supports these image formats:

@table{40 20 20 20}{
	@header{Pixel size} @tab @header{PCX} @tab @header{PNG} @tab @header{TGA}
	@row{single}
	8-bit (paletted)* @tab Yes @tab Yes @tab - @row
	16-bit @tab - @tab - @tab - @row
	24-bit @tab - @tab Yes @tab Yes** @row
	32-bit (alpha channel) @tab - @tab Yes @tab Yes**
}

@caption{* = the palette does not have to match the palette of the game @br
** = TGAs must be type 2 (uncompressed, unmapped RGB)}

Note that 32-bit images are just 24-bit images with an additional 8 bits
per pixel for the alpha channel. Contact me if you feel that it's necessary
to add support for other formats.

The recommended format for high-resolution textures is paletted PNG. It is
the easiest format in which to distribute the textures (small). Since the
palette doesn't have to be the same as the game's, it should be enough for
just about any texture.

The high-resolution textures can be of any size. The engine will render
them scaled to fit the size of the original texture. This means the aspect
ratio of the new texture doesn't have to be the same as of the original
texture. Note that the engine will have to resize all textures so that
their dimensions are powers of two (e.g. 32, 64, 128, 256). This means
TGA/PNG textures whose width and height are already powers of two can be
loaded faster.

Color keying is done if the file name of the image ends in "-ck", for
example @file{brnbigc-ck.png}. Both cyan (0,255,255) and purple (255,0,255) are
used as keys. An alternative way to have transparency is to use an alpha
channel. In it, white (255) means opaque and black (0) is fully
transparent. All values in between can be used, too, for partly translucent
pixels.

High-resolution textures are loaded from the @file{ Data\<Game>\Textures\ }
directory. For example jDoom uses the directory @file{ Data\jDoom\Textures\ }.
To create a high-resolution texture for the wall texture STARTAN3 you'd place
a TGA file named @file{startan3.tga} or a PNG file named @file{startan3.png}
into the @file{Textures} directory. The filenames of images that
replace flats must begin with "flat-", e.g. to replace the flat FLOOR7_2 you'd
need to have a TGA file @file{flat-floor7_2.tga} in the @file{Textures}
directory. If there are both PNG and TGA versions of the same texture,
the engine will use the PNG version.

Note that the filenames of the high-resolution textures must match the
@em{texture} names, not the names of the patches that make up the textures.
For example: DOOR2_5 is a patch name, DOOR3 is the texture that uses
DOOR2_5.

Any textures found in the @file{Textures} directory are automatically used. To
disable high-resolution textures use the command line option @opt{-nohightex}.
The option @opt{-texdir} can be used to change the directory from which the
textures are searched.

Links to high-resolution texture sites:

@ind{
	@link{http://switch.to/doom2textures} @br
	@link{http://switch.to/heretictextures} @br
	@link{http://switch.to/hexentextures}
}



@section{ Detail textures }

Detail textures are grayscale images that are rendered on top of normal
textures when walls and planes are viewed from close by. A signed-add
blending is used, which lets the detail texture either darken or brighten
the underlying texture: black => dark, gray => no change, white => bright.

Detail textures can be assigned to specific wall textures and
flats using Detail definitions (@file{Details.ded}). The definition is described
in the Doomsday Engine Definitions Reference (@file{DEDDoc.txt}).

Detail textures can be loaded from PCX images or raw image data. Either
way, the image must be inside a WAD file or loaded using the @opt{-file}
option. When using the @opt{-file} option to load detail textures, the
file names of the images become lump names (see
@ref{fileopt}{@opt{-file} option}).

PCX images used as detail textures must have a color depth of 8 bits
and their width and height must be powers of two. The palette should
be a grayscale one. It's possible to use other colors but the result
can be weird due to the way the blending of detail textures is done.

If the source data is a raw image, it must be either 64x64, 128x128
or 256x256 pixels in size. Raw images contain only the pixel values,
(one byte per pixel) and have only one color component per pixel
(they're black and white images), which means the lump or file that
contains the detail texture can either be 4096, 16384 or 65536 bytes long.

Using the default scaling, the pixels of detail textures are four times
smaller than the pixels of regular textures.

The console variables @var{rend-tex-detail}, @var{rend-tex-detail-far},
@var{rend-tex-detail-strength} and @var{rend-tex-detail-scale} control
the rendering of detail textures.



@section{ Custom music and sound files }

Doomsday can play various external music files using the FMOD library
(@link{http://www.fmod.org/}). FMOD supports a variety of music file
formats including MP3, MOD and S3M (modules are a good option due
to their good quality/size ratio). External music files can be played
any time using the @cmd{playext} console command.

@notice{
	On some systems using FMOD has caused lock-ups or other
	unwanted behavior. If this appears to be the case for you,
	you should disable FMOD using the @opt{-nofmod} option. However,
	this will also make it impossible to play external music
	files such as MP3s.
}

If you don't want to edit the Audio definitions you can store
the external music files into a WAD. In this case you must name
the lumps so that they match the lumps of the original songs,
and are thus loaded instead of them. Any music files supported
by FMOD can be loaded from a WAD.

An example of editing the definitions: you have a terrific song
called @file{song.mp3} and you'd like to hear it instead of
Doom's regular "e1m2".

@list/enum{
@item The first thing to decide is whether you want to play the
song from where it's currently located, or do you want to move it under
the Doomsday directory. In the latter case it would be easy to
distribute the song and its definition file to others, since they
wouldn't have to worry about where the music file is. If you decide
to move the song, create a directory under the @file{ Doomsday\Data\jDoom\ }
directory called @file{Music}. Another logical choice could be
@file{ Doomsday\Music\ }. Then copy the song into the created directory.

@item Open @file{Audio.ded} in a text editor. In it, you will find
a bunch of Music definitions, including:

@code{Music @{ ID = "e1m2"; Lump = "D_E1M2"; @} }

In order to make the change persist over version upgrades (each one
will overwrite @file{Audio.ded}) copy the definition to @file{User.ded}
in the @file{ Defs\jDoom\ } directory, or create a new DED file with
any name you like in the @file{ Defs\jDoom\Auto\ } directory. Anything
in the @file{Auto} directory will be read. If @file{User.ded} doesn't
exist, just create a new file for it.

@item Now you have the new Music definition, and the only thing left
is to let the engine know which file it should load when the song
"e1m2" is played. Edit your definition by adding the @opt{Ext} key:

@ind{@pre{Music @{
  ID = "e1m2"; Lump = "D_E1M2";
  Ext = "Data\jDoom\Music\song.mp3";
@}}}
}

CD tracks can be associated with songs in a similar fashion, but
instead of using the @opt{Ext} key you should use a @opt{CD track}
key:

@code{CD track = 3;}

External WAV files can be used instead of samples stored in WAD files, if you
set the @opt{Ext} key of the corresponding Sound definition.
Also, Doomsday will automatically detect the format of a sample
when it's loaded from a WAD file. In this case you don't need to
edit any definitions. Doomsday supports 8/16 bit @em{mono} PCM WAV files
with no compression.



@section{ Dehacked patches }

Most features of Dehacked are supported by Doomsday's Dehacked reader.
The loader will print a message during startup if an unsupported
feature is used.

Let's say you have the Dehacked patch @file{file.deh} in your runtime
directory. Then you can use the command line option
@opt{-deh file.deh} to load it at startup.

If a lump named @file{DEHACKED} is found in a WAD, it will be
automatically applied when the WAD is loaded. Normally only the last
@file{DEHACKED} lump is used if a lump with that name is found
in multiple WADs. Use the option @opt{-alldehs} to make the engine
apply all found @file{DEHACKED} lumps.



@chapter{ Known issues }

@list{
@item The FMOD library has been known to cause problems on some systems.
	If you experience sudden crashes or lock-ups, try the @opt{-nofmod}
	option. It may also be helpful to disable MIDI music entirely
	with the @opt{-nomusic} option.

@item Software gamma doesn't affect MD2 skins. Use hardware gamma
	correction (@var{vid-gamma}, @var{vid-contrast}, @var{vid-bright})
	instead.
}




@chapter{ Acknowledgements }

@a{acks}
@strong{id Software}, for creating DOOM and then releasing its source code.

@strong{Raven Software}, for creating Heretic and Hexen and then releasing their
source code.

@strong{Graham Jackson}, for helping me with the source code, fixing some Doom bugs
and doing a lot of testing.

@strong{Abbs}, for maintaining the jDoom model pack and doing wonderful work on the
models and particle effects.

@strong{Anton Rzheshevski} (aka Cheb), for player weapon 3D models and
other MD2 modifications/enhancements and maintaining the jDoom model
pack.

@strong{Greg Fisk} (Slyrr), for many excellent 3D models for jHeretic.

All authors of the MD2 models and definition files (see the readme files
under @file{ Md2\ } for more detailed info).

@strong{David Jarvis}, for doing network testing with jDoom and jHeretic and
generously contributing essential computer hardware components! :-)

@strong{Andrew Apted}, for glBSP (@link{http://glbsp.sourceforge.net/}).

@strong{William Mull}, for hosting the j-sites and bearing with me.

@strong{Patrick Farrell}, for providing FTP space for the Doomsday project.

@strong{Darin Petersen}, for the very useful MD2 export tool QTiP.

People who have sent bug reports. One can't expect me to keep coding this
thing and test every possible level in case something has broken down...
(Did you know that Doom, Heretic and Hexen combined have over 220
'official' levels?) By sending bug reports you can be sure I'll at least
try to fix it some day. :-)

People who have sent ideas for new features. My goal is not to create the
most feature-packed, super-customizable FPS extravaganza but to have ports
of Doom, Heretic and Hexen that play right and look nice, so I might not
think of something you'd very much like to see.

All DOOM / Heretic / Hexen fans, for keeping these excellent games alive.
Keep on playing!

Me, Jaakko Keränen, for writing this stuff! You rule! ;-D
