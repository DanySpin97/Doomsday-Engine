# The Doomsday Engine Project
#
# Copyright (c) 2009 Jaakko Ker√§nen <jaakko.keranen@iki.fi>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
 
# ================
# THE KITCHEN SINK
# ================
# This script tests *all* features of the Doomsday Script Language.
# Behold its power and glory.

secNum = 0
subSecNum = 0

def print_section(msg): print "\n" + "." * 78 + "\n%i.%i: %s\n" % [secNum, subSecNum, msg]

def begin_section(msg)
    secNum += 1
    subSecNum := 0
    print_section(msg)
end

def subsection(msg)
    subSecNum += 1
    print_section(msg)
end

# Section 1: Basic Expressions
# ----------------------------
begin_section('Basic types (number, text, array, dictionary).')
print 5, 5.5, -3.141592657
print 0x100, 0X123
print "Hello", 'World'
print """I can span
newlines."""
print [1, 2, 3]
print [1, [2, 3], 4]
print {'a': 'b', 1: ['b', {5:6, 6:7}], ['array', 'as', 'key']: 'oh my'}

subsection('Constants: True, False, None, Pi.')
print True, False, None, Pi

subsection('Built-in functions: len(), dictkeys(), dictvalues().')
print 'len("abcd") =', len("abcd")
print 'len([1, 2, 3, 4]) =', len([1, 2, 3, 4])
print 'len({1:2, 3:5, 8:13}) =', len({1:2, 3:5, 8:13})
print 'dictkeys({1:2, 3:5, 8:13}) =', dictkeys({1:2, 3:5, 8:13})
print 'dictvalues({1:2, 3:5, 8:13}) =', dictvalues({1:2, 3:5, 8:13})

# Section 2: Operator Expressions
# -------------------------------
# - all the operators
# - special stuff like / with text
begin_section('Operators: +')
print 'Arithmetic:', 1 + 1, -.5 + .5
print 'Larger than 32-bit:', 0xffffffffff + 0xffffffffff
print 'Text:', 'Hello' + 'World'
print 'Array:', [1, 2, 3] + ['a', 'b', 'c']
print 'Dictionary:', {1:2, 3:4} + {'a':'b', 'c':'d'}

subsection('Operators: -')
print 'Arithmetic:', 1 - 1, -.5 - .5
print 'Larger than 32-bit:', 0xffffffffff - 0xffffffffff
print 'Dictionary:', {'a':'A', 'b':'B'} - 'a'

subsection('Operators: /')
print 'Path concatenation:', 'folder' / 'filename.ext', 'folder/' / 'filename.ext'

subsection('Operators: slice.')
fullArray = [1, 2, 3, 4, 5, 6, 7]
print 'full:', fullArray
print 'sliced:', fullArray[2:4], fullArray[3:], fullArray[:3]
print 'nega-sliced:', fullArray[-4:-2]

# Section 3: Statements & Compounds
# ---------------------------------
begin_section('if/elsif/else statements.')
if True
    print 'Regular compound.'
else
    print "You won't see this."
end
if True: print "One statement compound."
else: print "Not printed."
if True
    print "Compound A"
    if False
        print "Compound B"
    else: print "Compound C"
end
if False: print "Lots of useless stuff here"
elsif True
    print "From the elsif"
end

subsection('Assign statement and basic variable usage.')
print 'Assigning 10 to i...'
i = 10
print '...and i ==', i
i = 'abc'
print "Now i ==", i

subsection('while statement.')
i = 5
while i > 0
    print 'Still looping because %i > 0' % i
    i -= 1
end

subsection('break statement.')
while True
    print "I won't stay here."
    break
    print "Jumped over me."
end
print "Out of the while."
while False: print "Never going in."
while True
    while True
        print "Uh-oh, now I'm in trouble!"
        break 2
    end
end
print "Guess again!"

subsection('for statement.')
for i in ['planes', 'trains', 'automobiles']
    print "I would like:", i
end
print 'Value of i after the "for" loop is', i

subsection('continue statement.')
i = 3
while i > 0
    print 'i =', i
    i -= 1
    if i == 1: continue
    print 'Bottom of loop.'
end
for i in ['planes', 'trains', 'automobiles']
    if i == 'trains': continue
    print i, 'are cool!'
end

# Section 4: Scopes
# -----------------
begin_section('Creating a record.')
record myrec
print len(myrec)

subsection('Creating variables into a record.')
myrec.newMember = 100
print len(myrec)
print 'myrec.newMember =', myrec.newMember
print "Here's the record:"
print myrec

subsection('Creating a subrecord.')
record myrec.subrec
print len(myrec), len(myrec.subrec)
myrec.subrec.something = 200
print 'myrec.subrec.something =', myrec.subrec.something
print "Here's the record:"
print myrec

subsection('Checking whether members exist in record.')
print 'subrec' in myrec, 'newMember' in myrec, 'not-there' in myrec.subrec

subsection('Having two variables reference the same record.')
reference = myrec
print len(reference)
reference.otherMember = 150
print "Here's the record:"
print myrec

# - accessing variables in different scopes
# - assigning to variables =, :=
# - creating variables in a scope (populating record)
# - variables created by for

# Section 5: Functions
# --------------------
begin_section('Defining a function (empty body).')
#def func1(): return
#func1()

# - argument passing
# - default values
# - defining in scope
# - copying the funcvalue to another variable
# - passing func as callback parameter

# Section 6: Script Return Value
# ------------------------------
begin_section('Returning value from the script: the final expression.')

"I am the return value."
