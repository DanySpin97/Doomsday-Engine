ui {       
    # Shader for UI widgets.
    shader guiwidget.batch {
        vertex = "
            uniform highp mat4  uMvpMatrix;            
            uniform highp vec4  uColor[DENG_MAX_BATCH_UNIFORMS];
            uniform highp float uSaturation[DENG_MAX_BATCH_UNIFORMS];
            uniform highp vec4  uScissorRect[DENG_MAX_BATCH_UNIFORMS];
            
            attribute highp vec4 aVertex;
            attribute highp vec2 aUV;
            attribute highp vec4 aColor;
            attribute highp float aIndex; // uColor 
            
            varying highp vec2 vUV;
            varying highp vec4 vColor;
            varying highp vec4 vScissor;
            varying highp float vSaturation;
        
            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = aUV;
                
                int index = int(aIndex);
                vColor = aColor * uColor[index];
                vScissor = uScissorRect[index];
                vSaturation = uSaturation[index];
            }"
        include.fragment <hsv.glsl>
        fragment = "
            uniform sampler2D uTex;

            varying highp vec2 vUV;
            varying highp vec4 vColor;
            varying highp vec4 vScissor;
            varying highp float vSaturation;

            void main(void) {
                // Check the scissor first.
                if (gl_FragCoord.x < vScissor.x || gl_FragCoord.x > vScissor.z ||
                    gl_FragCoord.y < vScissor.y || gl_FragCoord.y > vScissor.w) {
                    discard;
                }
                gl_FragColor = texture2D(uTex, vUV);

                // Optionally adjust color saturation.
                if (vSaturation < 1.0) {
                    highp vec4 hsv = rgbToHsv(gl_FragColor);
                    hsv.y *= vSaturation;
                    gl_FragColor = hsvToRgb(hsv);
                }
                
                // Final vertex color.
                gl_FragColor *= vColor;
            }"
    }
}
