$Id$

Goals of Doomsday 2.0
=====================
<skyjake@users.sourceforge.net>

DE2 is:

- A generic 2.75D game engine: the world is built from 2D sectors that
  have planes with arbitrary normals as floor and ceiling.  Multiple
  sectors can be on top of each other, with overlapping planes as
  'interfaces' (e.g. water surface).  The 2D BSP tree is used for
  visibility ordering of subsectors, which divide the world into
  convex volumes.  This means the Z dimension is free to change:
  planes may move up and down and their normals may freely tilt.

- A platform for running '<3D' games, such as Doom, Hexen, Duke Nukem
  3D, Strife, ROTT and Wolfenstein 3D.  This is of paramount
  importance!  This justifies the engine's existence: it will provide
  such a common and easily customizable environment that porting <3D
  games will be convenient, if not trivial.  The compatibility means
  that DE2 will read the original data files (with the exception of
  glBSP-like things; although they should happen 'behind the scenes',
  automatically).

- A networked client/server implementation.  Like Quake, single-player
  games use the client/server separation, too, the only difference
  being that both endpoints exist inside the same program, as threads.
  The only way they communicate with each other is the network packet
  transfer.  TCP/UDP is used as the medium.  Clients can be very thin:
  the server must be capable of providing all the needed information
  (although downloading N megs of data naturally slows down the
  initial connection; the data will be saved on disk on clientside,
  for faster re-utilization; CRC32 and file names are used for
  identifying WAD files).  But, of course, clients still need *an*
  IWAD: it can't be allowed that people can play the game without
  owning one.

- Advanced multi-map architecture, with an unlimited number of maps
  and hubs.  Multiple maps can be running at the same time, with
  players simultaneously on different maps.  This allows see-through
  portals between maps, and potentially unnoticeable map transitions.
  Achieving this is quite trivial in an object-oriented design.
  Special attention must be placed on the handling of map-specific
  cvars, and the simultaneous rendering of multiple maps.
 
- Fully scriptable: all objects in the game world, starting with hubs
  and maps, are accessible via the console.  The scripting language is
  simple, yet powerful: it's purpose is to be an efficient way to
  implement customizations and map scripts without the need to modify
  the source.  Things like menus (both the game's and the engine's)
  are set up using scripts.  Only things that are difficult to script,
  or need to be highly efficient, are compiled into the game module.
  As a rule, it should be possible to do just about everything using
  scripts, from defining new mobj types to modifying the environment
  settings in sectors with a specific tag.  In short, the scripts
  should combine the functionality of ACS, DED, XG and InFine, plus
  menu config/control and access to low-level engine subsystems such
  as event processing, audio and the file system (which combines data
  lumps and real files into one virtual filesystem, where the actual
  data may be remote, in a data file or in an actual file somewhere
  under the Doomsday root directory).

- Portable: developed on Linux, binaries for at least Linux and Win32.
  This is another very important point!  I like the prospect of
  developing in Linux.  (Doom was developed on NeXT, which is a
  Unixish system.)  SDL will be the underlying media library (timing,
  input).  OpenGL is the main presentation module (Direct3D will be
  added later, much later).
