$Id$

Doomsday 2.0 Roadmap
====================
<skyjake@users.sourceforge.net>

This document contains a preliminary collection of minor and major
milestones for the DE2 project.  At this stage in the project, the
listed milestones are merely guidelines and speculation.  Everything
is still subject to change.

The general idea of the roadmap is to build the system in stages,
starting from serverside functionality and then moving on to the
clientside.


1. 'Empty' engine core with stubs for graphics, networking, other
   subsystems and a game.  This milestone is mostly about setting the
   basic architecture and file hierarchies: what classes are there in
   the core, and how do they interact.  Running the executable goes
   through the empty inits, then quits.

2. Core of the timing mechanism.  This is the main loop: it checks how
   much time has passed and then calls the Tickers of all registered
   subsystems.  (An interface for being allowed to register for core
   timing would be neat.)  Also need to think about threads in this
   milestone.  The dedicated server uses two threads: one for the
   'internals' and one for the user interface (so terminals remain
   responsive at all times, views will be updated).  There obviously
   needs to be a separate timing loop for each thread.

3. The presentation subsystem.  Controls all display windows
   (displays).  Each display has a presentation module: text-mode,
   OpenGL or Direct3D.  The presentation module may be changed at any
   time.  Each display can have a set of windows (views and
   terminals).  Windows are always located at one display at a time.
   Windows may register for Event processing (Responder interface).

3. Text-mode presentation module, to be used with dedicated servers
   and during initial startup.  All presentation modules will have the
   text-mode drawing capabilities.  The idea is that the console
   shouldn't need to worry about how things get presented on screen;
   the console is only text anyway.  (An interface for text-mode stuff
   would be neat.)

4. Input subsystem.  Maintains a collection of controller objects,
   which generate Events.  At this stage only basic keyboard input is
   necessary, using standard input (?).  The Events get buffered
   inside the module.

5. Core of the Event processing mechanism.  In the beginning of the
   main timing loop, event processing occurs.  The Responders of all
   registered services are called.  An interface for registering would
   be neat.  It may be that only windows need to respond to things,
   though.  (Windows include both views and terminals.)  The order of
   the list of windows determines which window gets to process an
   event first.

6. Console module.  Maintains a set of Terminals.  Each terminal has
   its own output window and command line (w/output history).
   Terminals register for responding independently.  (The console
   module itself doesn't respond to anything.)  Only one terminal may
   have input focus at the same time.  Printing global and
   terminal-specific messages.  Terminals can also be registered for
   timing.  Note that clients may open 'remote' terminals, which don't
   have an output window on the screen.  These terminals must use some
   kind of 'serialized text-mode' presentation that hide the details
   of the network connection.

7. Console objects in the console module.  These include directories,
   variables, definitions and scripts.  Directories are containers for
   other kinds of console objects.  (I need a better term for "console
   object"; cob?)  Mechanisms for accessing using path names, etc.

8. Console variables are created by instantiating the variable class.
   It'll auto-register into the console module.

9. Parsing and executing of console commands, i.e. scripts.
   Referencing of console objects in commands, e.g. when copying the
   value of one var to another, or executing the contents of a string
   variable.  This milestone includes the parsing (recursive descent).
   Built-in commands and script objects can be accessed with similar
   syntax.  The cob search path.

10. Console module Ticker.  The console module maintains a set of
   running scripts in realtime.  A kind of multitasking is used, where
   the kernel will suspend a script once it has run long enough.
   Builtin commands can't be suspended (atomic?).

11. Definitions.  Most of the old DED stuff will eventually have its
   counterparts.  This milestone implements the Definition objects,
   which are basically records of data (ints, floats, strings).  Must
   be efficient to access from outside of scripts (e.g. a fixed
   struct).  All Definition types are derived from a base class, which
   provides the record accessing mechanisms.

Major I: Basic Console Functionality
 * the console environment (the hierarchy)
 * auto-registering cvars (just instantiate)
 * timed, multi-process scripting (the core of the console)
 * different types of console variables

---

1. The World module.  Contains a number of Maps, which are grouped
   into Hubs.  Maps can be linked to other maps, and Hubs have at
   least successors.  Inactive maps (no clients in them) will be
   swapped to disk (savegame).  There may be several active maps (some
   clients on one map and some on another).  Each Map has its own
   blockmap, blocklines, etc.  Maps will register for Ticking.  The
   map interconnections are described with definitions.  Each Map may
   contain Polygon Objects (polyobs), which are rotateable segs inside
   a sector.  (Polyobs should have bottom and top heights; everybody
   likes rotating platforms that can also act as elevators.)  Must
   keep in mind that SoS must be implemented at some point.

2. Hubs.  There is only one active hub at a time: all clients are
   always in the same hub.  When a hub is entered, a low-prio
   background thread will start loading all the hub's maps, so
   entering them will be instantaneous.  Maps won't be included in
   savegames until visited, though ('activated').

3. Agents.  This is the base class for all "thinkers" in the map.
   When the Map Ticks, it will go through its thinker chain in the
   traditional fashion.  Agents are immaterial (like a plane mover).

4. Map Objects (mobs), derived from Agent.  Represent physical
   objects.  The physics core concerns itself with mob <-> mob and mob
   <-> map interactions, as well as basic inertia and the physical
   environment.  Mobs are simplified to cubes for collision testing,
   etc.  Each mob has a type, position, velocity, rotation, radius and
   height.  Mobs also have attributes such as visibility, gravity,
   etc.  The physical interactions core is quite complex (polyobs and
   everything), but very generic: mobs will respond to interactions
   themselves (an interface is required as game modules will have
   their own mob types).

5. Memory zone module.  (Necessary? See next milestone.)  The memory
   zone is used at least for the lump cache.  Must think about how
   client and server threads share resources when running
   simultaneously (if hasn't been decided earlier).  And what about
   map sharing?  Does it even occur?

6. WAD loading and lump cache.  The WAD module maintains a set of
   WadFile instances, and the general lump cache.  (Important
   question: with modern hardware, is it even necessary to have a lump
   cache?  Loading a 20 MB data file can be done without artifical
   swapping.  It will be encapsulated inside the Data module, in any
   case.)

7. Map loading from WAD files.  Includes full initialization of the
   map: agents are created.  Support for the Doom format and the Hexen
   format.  Game module knows how to create mobs of specific types.

8. Map 'event' scripts, e.g. init, entry, exit.

Major II: Maps And Objects
 * maps, hubs and interconnections
 * map objects
 * agents (light changers, plane movers, etc.)

---

1. Client data on the server.  The core has a set of clients (any
   number).  Each client controls a mob, the type of which determines
   what the client can do (none, camera, player, etc).  If a client
   controls a mob, it does *not* imply that the client views the world
   from its pov.  The default view a client gets is the controlled
   mob, but the client may change the view or request more views (more
   data will be sent).  This means the server will maintain a list of
   povs (always mobs) for each client.  The controlled mob may also be
   arbitrarily changed.

2. Client commands.  These include movement, viewing and impulses.
   Impulses are just numbers that represent certain commands, maybe
   with a few parameters.  Impulses include such things as jumping,
   firing and using.  Movement and viewing are free-ranged, because
   mouses and joysticks are supported.  The server reads received
   commands and carries them out on the controlled mob.  (Client will
   perform them on the clientside; that's the prediction.)

3. Sending of updates to clients.  The delta pool mechanism will be
   used.  The idea is that the clientside knowledge is 'mirrored' on
   the server, and the changes are sent to the client.  Multiple pov
   mobs may be in the same pool, there will be no duplication of
   deltas.  Only the necessary information about each mob and map
   change is sent.  Note that now that maps are fully inside the
   engine, they may notify the pools themselves, making things more
   efficient at least for the map changes.  (PVS, anyone?)  In any
   case, the delta mechanism must be hidden from the game modules
   (important!).

4. Terminals may be opened by clients.  In this case, changes in the
   terminal window are transmitted to the client and not displayed on
   screen.  Clients may control the server this way.

Major III: Basic Networking
 * server sends stuff to clients
 * clients send commands to server
 * console's role in the system (login/logout, etc.)

---

1. Game module.  Maintains its own state and controls many things.
   Provides most of the mob types.  (The engine provides such generic
   mob types as 'none' and 'camera'.)  The primary purpose of the game
   module is to provide agent implementations.
   
2. Mob Types.  Since all mobs of a certain type are similar, the
   functionality is also shared.  The game module contains many mob
   type classes, which provide the type's operations (such as
   creation, etc.).  The mobs themselves in the map 'just' hold state
   information.  Type attributes include thrust movement (for players
   and bots) vs. step movement (for most actors).
   
3. Game control: starting a new game, choosing maps, etc.  Using
   console commands?

4. Saving the game.  The hub is serialized with everything in it.
   Agents are reponsible for serializing themselves.  Clients'
   controlled and viewed mobs are also saved.  Game / Hub / Map /
   Object-scope and running cobs are also saved.  In short: the
   *entire* state of the engine is saved.  A mechanism is needed to
   allow the game module to also save its state (an interface?).
   (Clients will save extra/different information, such as the state
   of all particle generators, which are agents.)
   
5. Restoring a saved game.  The entire hub with all agents is
   restored.  Controlled and viewed mobs are also restored (assigned
   to connected clients with matching IDs?).  The entire state is
   restored.

Major IV: Basic Game Functionality
 * game gets to control the process
 * players and player classes
 * saving and restoring the game

---

1. Client connecting.  Entering games, creation of new mobs, etc.

2. Client disconnecting.  Leaving, remove mob, etc.

3. Chat messages.

Major V: Dedicated Server
 * the rest of dedicated server functionality

---

1. Clientside runs in its own thread(s).  The client needs to predict
   movement of things using the physics routines.  What is the exact
   thread layout?  Clientside initialization?  Local server threads
   will not be used at all when connected to a remote server (pure
   client).
   
2. OpenGL presentation module. Maintains a graphical display.
   Graphical displays may easily display an arbitrary number of
   windows at arbitrary locations and rendering parameters.

3. Terminal to the local console.  The presentation module knows how
   to display a text-mode window.

4. Connecting and disconnecting from the server.

5. Clientside world.  This is what the client updates when it receives
   deltas from the server.  Since the client has *no access* to the
   serverside world, everything the client displays must be in the
   clientside world.  In practice a Map with some special properties.
   Some data is purely clientside (like particle effects).
   
6. Views.  A view is a window that shows a 3D rendering of the
   (clientside) world from some mob's pov.  (Note that there are no
   views that show the serverside world.)

7. Mob Visualizers.  (A better name, please...)  Responsible for
   rendering a mob into a view.  Come in two flavors: sprites and
   models.  An object may have both or just one (not at the same time,
   though).  Client variables control which is preferred.  Should be
   generic so objects can be visualised outside of views, too.

Major VI: Clientside Basics
 * graphical presentation
 * (dis)connecting
 * clientside world
 * views
 * mob visualisation
 
---

1. Clients form client commands from Events.

2. Commands are sent to the server.

3. Commands are used to simulate the controlled mob locally.
   (Hopefully the discrepancy can be kept at a minimum!)

4. Updates are applied to the clientside world.  (Warping!)

Major VII: Clientside Operations
 * forming and sending client commands
 * simulating the world
 
---

1. The game module can draw stuff on views.  (A subclass of View?)

2. Menus are the primary mechanism an actual user has to control the
   game.  The engine provides a single UI/menu system for the game.
   The system is dynamical: widgets are created using console commands
   and the actions they generate are also console commands/scripts.
   The ideal situation would be to define the menu/other interfaces in
   a script file.

3. InFine functionality.  Displays interactive animation sequences on
   a view.  Should be integrated with the rest of the menu system.
   Controlled with InFine scripts and console commands.  The scripts
   are usually received from the server.

Major VIII: Clientside Game Functionality
 * game's layer on a view
 * UI (includes menus)
 
---

Major IX: Tidbits
 * demo recording and playback

---

Major X: Games!
 * Hexen (do this first: Heretic and Doom have a subset of Hexen's
   functionality)
 * Heretic
 * Doom

---

Major XI: More Games!
 * Duke Nukem
 * etc.
